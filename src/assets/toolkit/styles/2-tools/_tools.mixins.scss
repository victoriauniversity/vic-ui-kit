/*==================================================
=            VICTORIA'S MIXINS COLLECTION          =
==================================================*/


/*******************************************************************************

  Mixins collection that can be used to simplify SCSS development.

  *HIGHLY RECOMMENDED* to read through comments of all available mixins before
  you start an active development!

  Also, all use or be combined with Bourbon's mixins.

  Bourbon's documentation: http://bourbon.io/docs/

/*******************************************************************************


/* ===== BOX MODEL ========================================================== */


/*******************************************************************************
 * Transforms non-object element (eg. pseudo-elements) into object one.
 *
 * @display         - Type of box of the object element.
 * @content         - Optional text content (useful for icons).
 * @position        - Specifies type of positioning method used for an element.
 */
@mixin objectify( $display: inline-block, $content: "", $position: relative ) {
    position:   $position;
    display:    $display;
    content:    $content,
}





/* ===== TYPOGRAPHY ========================================================= */


/*******************************************************************************
 * Shorter definition of all active states of an element.
 *
 * { @content }     - Definition of the active states' styles.
 */
@mixin hoverify() {
    &:hover,
    &:active,
    &:focus {
        @content;
    }
}


/*******************************************************************************
 * Makes custom square bullets in the list-item using its `::before`
 * pseudo-element. *SHOULD BE* used in the <li> element.
 *
 * @size            - Size of the square.
 * @colour          - Colour of the bullet.
 */
@mixin make-list-square-bullet( $size, $colour: $text-fade-colour ) {
    &:before {
        @include objectify( inline-block, $position: static );
        @include size( $size );
        background-color: $colour;

        @content;
    }
}





/* ===== IMAGES & ICONS ===================================================== */

/*******************************************************************************
 * Turns potentially non-object element into a font icon container.
 *
 * @display         - Type of box of the object element.
 * @ico-code        - Unicode code of the icon from the $font-family.
 * @font-family     - Name or type of the font icon.
 */
@mixin iconify( $display: inline-block, $ico-code: "", $font-icon-family: $font-icons ) {
    @include objectify( $display, $ico-code, relative );
    font-family: $font-icon-family;
}
