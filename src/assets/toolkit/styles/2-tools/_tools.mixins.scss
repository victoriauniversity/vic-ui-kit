/*==================================================
=            VICTORIA'S MIXINS COLLECTION          =
==================================================*/


/*******************************************************************************

  Mixins collection that can be used to simplify SCSS development.

  *HIGHLY RECOMMENDED* to read through comments of all available mixins before
  you start an active development!

  Also, all use or be combined with Bourbon's mixins.

  Bourbon's documentation: http://bourbon.io/docs/

/*******************************************************************************


/* ===== BOX MODEL ========================================================== */


/*******************************************************************************
 * Transforms non-object element (eg. pseudo-elements) into object one.
 *
 * @display         - Type of box of the object element.
 * @content         - Optional text content (useful for icons).
 * @position        - Specifies type of positioning method used for an element.
 */
@mixin objectify( $display: inline-block, $content: '', $position: relative ) {
  position:   $position;
  display:    $display;
  content:    $content;
}


/*******************************************************************************
 * Basic most commonly used skeleton for :after pseudo-class that turns it into
 * stylable element.
 *
 * @content - :after's additional properties.
 */
@mixin after( $display: inline-block, $text: '', $position: static ) {
  &::after {
    @include objectify( $display, $text, $position );

    @content;
  }
}


/*******************************************************************************
 * Basic most commonly used skeleton for :before pseudo-class that turns it into
 * stylable element.
 *
 * @content - :before's additional properties.
 */
@mixin before( $display: inline-block, $text: '', $position: static ) {
  &::before {
    @include objectify( $display, $text, $position );

    @content;
  }
}





/* ===== TYPOGRAPHY ========================================================= */


/*******************************************************************************
 * Shorter definition of all active states of an element.
 *
 * { @content }     - Definition of the active states' styles.
 */
@mixin hoverify() {
  &:hover,
  &:active,
  &:focus {
    @content;
  }
}


/***************************************************************************
* Non-underlined decoration to underlined on hover.
*/
@mixin hoverify-underline() {
  text-decoration: none;
  @include hoverify() { text-decoration: underline; }
}


/*******************************************************************************
 * Makes custom square bullets in the list-item using its `::before`
 * pseudo-element. *SHOULD BE* used in the <li> element.
 *
 * @size            - Size of the square.
 * @colour          - Colour of the bullet.
 */
@mixin make-list-square-bullet( $size, $colour: $text-fade-colour ) {
  &::before {
    @include objectify( inline-block, $position: static );
    @include size( $size );
    @content;
    background-color: $colour;
  }
}





/* ===== IMAGES & ICONS ===================================================== */

/*******************************************************************************
 * Turns potentially non-object element into a font icon container.
 *
 * @display         - Type of box of the object element.
 * @ico-code        - Unicode code of the icon from the $font-family.
 * @font-family     - Name or type of the font icon.
 */
@mixin iconify( $display: inline-block, $ico-code: '', $font-icon-family: $font-icons ) {
  @include objectify( $display, $ico-code, relative );
  font-family: $font-icon-family;
}

@mixin clearfix {
  &::after {
    clear: both;
    display: block;
    content: '';
  }
}



@mixin triangle(
  $direction,
  $width,
  $height,
  $color
) {
  @if not index(
    'up' 'up-right' 'right' 'down-right' 'down' 'down-left' 'left' 'up-left',
    $direction
  ) {
    @error 'Direction must be `up`, `up-right`, `right`, `down-right`, ' +
           '`down`, `down-left`, `left` or `up-left`.';
  } @else if not _is-color($color) {
    @error '`#{$color}` is not a valid color for the `$color` argument in ' +
           'the `triangle` mixin.';
  } @else {
    width: 0;
    height: 0;
    border-style: solid;

    @if $direction == 'up' {
      border-color: transparent transparent $color;
      border-width: 0 ($width / 2) $height;
    } @else if $direction == 'up-right' {
      border-color: transparent $color transparent transparent;
      border-width: 0 $width $width 0;
    } @else if $direction == 'right' {
      border-color: transparent transparent transparent $color;
      border-width: ($height / 2) 0 ($height / 2) $width;
    } @else if $direction == 'down-right' {
      border-color: transparent transparent $color;
      border-width: 0 0 $width $width;
    } @else if $direction == 'down' {
      border-color: $color transparent transparent;
      border-width: $height ($width / 2) 0;
    } @else if $direction == 'down-left' {
      border-color: transparent transparent transparent $color;
      border-width: $width 0 0 $width;
    } @else if $direction == 'left' {
      border-color: transparent $color transparent transparent;
      border-width: ($height / 2) $width ($height / 2) 0;
    } @else if $direction == 'up-left' {
      border-color: $color transparent transparent;
      border-width: $width $width 0 0;
    }
  }
}
