/*==========================================
=        GENERAL TYPOGRAPHY SETUP          =
==========================================*/

/// Checks if a list contains a value(s).
///
/// @argument {list} $list
///   The list to check against.
///
/// @argument {list} $values
///   A single value or list of values to check for.
///
/// @return {boolean}
///
/// @access private

@function _contains(
  $list,
  $values...
) {
  @each $value in $values {
    @if type-of(index($list, $value)) != 'number' {
      @return false;
    }
  }

  @return true;
}



/// Builds the `src` list for an `@font-face` declaration.
///
/// @link https://goo.gl/Ru1bKP
///
/// @argument {string} $font-family
///
/// @argument {string} $file-path
///
/// @argument {boolean} $asset-pipeline
///
/// @argument {list} $file-formats
///
/// @return {list}
///
/// @require {function} _contains
///
/// @access private

$font-supported-formats: woff woff2 ttf;

@function font-source-declaration(
  $font-family,
  $file-path,
  $asset-pipeline,
  $file-formats: $font-supported-formats
) {
  $src: ();

  $formats-map: (
    eot:   '#{$file-path}.eot?#iefix' format( 'embedded-opentype' ),
    woff2: '#{$file-path}.woff2' format( 'woff2' ),
    woff:  '#{$file-path}.woff' format( 'woff' ),
    ttf:   '#{$file-path}.ttf' format( 'truetype' ),
    svg:   '#{$file-path}.svg##{$font-family}' format( 'svg' ),
  );

  @each $key, $values in $formats-map {
    @if _contains($file-formats, $key) {
      $file-path: nth( $values, 1 );
      $font-format: nth( $values, 2 );

      @if $asset-pipeline == true {
        $src: append( $src, font-url( $file-path ) $font-format, comma );
      } @else {
        $src: append( $src, url( $file-path ) $font-format, comma );
      }
    }
  }

  @return $src;
}

@mixin font-face(
  $font-family,
  $file-path,
  $font-weight,
  $file-formats: $font-supported-formats,
  $asset-pipeline: false,
) {
  @font-face {
    @content;
    font-family: $font-family;
    font-style: normal;
    font-weight: $font-weight;
    src: font-source-declaration( $font-family, $file-path, $asset-pipeline, $file-formats );
  }
}


/* ===== FUNCTION HELPERS ================================================= */

@function modular-scale(
  $increment,
  $value: $modular-scale-base,
  $ratio: $modular-scale-ratio,
) {
  $v1: nth( $value, 1 );
  $v2: nth( $value, length( $value ) );
  $value: $v1;

  // scale $v2 to just above $v1
  @while $v2 > $v1 {
    $v2: ($v2 / $ratio); // will be off-by-1
  }
  @while $v2 < $v1 {
    $v2: ($v2 * $ratio); // will fix off-by-1
  }

  // check AFTER scaling $v2 to prevent double-counting corner-case
  $double-stranded: $v2 > $v1;

  @if $increment > 0 {
    @for $i from 1 through $increment {
      @if $double-stranded and ($v1 * $ratio) > $v2 {
        $v2: ($v2 * $ratio);
        $value: $v2;
      } @else {
        $v1: ($v1 * $ratio);
        $value: $v1;
      }
    }
  }

  @if $increment < 0 {
    // adjust $v2 to just below $v1
    @if $double-stranded {
      $v2: ($v2 / $ratio);
    }

    @for $i from $increment through -1 {
      @if $double-stranded and ($v1 / $ratio) < $v2 {
        $value: $v2;
        $v2: ($v2 / $ratio);
      } @else {
        $v1: ($v1 / $ratio);
        $value: $v1;
      }
    }
  }

  @return $value;
}

$scale-font-base: $base-font-size !default;

/** Scales the font using pre-defined ratio to keep the consistency.
  *
  *  $font-size (default: 1) - indexed from 0, where 0 = $base-font-size;
  *                            > 0 = Bigger fonts
  *                            < 0 = Smaller fonts
  */
@function scale-font( $font-size: 1 ) {
  @return modular-scale( $font-size );
}


$heading-to-body-ratio: $base-heading-to-body-ratio !default;

/** Similar to @function scale-font(). Additionally, it multiplies the size
  * with `heading to body text` ratio. Useful to compensate sizing when the
  * heading font is visibly different default size than body font
  * (eg. 16px heading is significantly bigger/smaller than 16px of body).
  *
  */
@function scale-heading( $heading-size ) {
  @return modular-scale( $heading-size ) / $heading-to-body-ratio;
}





/* ===== DEFINE & IMPORT FONTS ============================================ */


/* Victoria's font `National` */
@include font-face( $font-victoria, '#{$font-path-victoria}-Regular', $weight-normal, $file-formats: $font-supported-formats );
@include font-face( $font-victoria, '#{$font-path-victoria}-Semibold', $weight-semibold, $file-formats: $font-supported-formats );
@include font-face( $font-victoria, '#{$font-path-victoria}-Extrabold', $weight-extrabold, $file-formats: $font-supported-formats );


/* Victoria's icon font */
@include font-face( $font-icons, $font-path-icons, $weight-normal, $file-formats: $font-supported-formats );





/* ===== BASE TYPOGRAPHY ================================================== */


html {
  font-size: 100%;

  //TODO: Tweak % at the end to find best UX fit
  @include breakpoint( $mobile-large-and-smaller ) {
    font-size: 85%;
  }

  @include breakpoint( $tablet ) {
    font-size: 92.5%;
  }

  @include breakpoint( $desktop-large ) {
    //font-size: 105%;
    font-size: 100%; // Temporary to avoid incosistencies between graphic designs and templates
  }
}

body {
  font-family: $base-body-family;
  line-height: $base-line-height;
  color:       $base-font-color;

  // Make fonts consistent and nice across browsers
  -webkit-font-smoothing:  antialiased;
  -moz-osx-font-smoothing: grayscale;
  text-rendering:          optimizeLegibility;
}


/** Headings */

h1,
h2,
h3,
h4,
h5,
h6 {
  font-family: $base-heading-family;
  font-weight: $weight-semibold;
  color:       $base-heading-color;
  line-height: 1;
}

h1 {
  font-weight: $weight-extrabold;
  font-size: scale-heading( 4 );
}

h2 {
  font-size: scale-heading( 3 );
}

h3 {
  font-size: scale-heading( 2 );
}

h4 {
  font-size: scale-heading( 1 );
}

$h5-font-size: scale-heading( 0 ) + ( scale-heading( 1 ) - scale-heading( 0 ) ) / 2;

h5 {
  font-size: $h5-font-size; // Exactly between h4 and h6
}

//DEPRECATED: *Do not use* in any templates
h6 { font-size: scale-heading( 0 ); }


/** Paragraphs */

p { line-height: $base-line-height; }


/** Lists */

ul { list-style: none; }
ol { list-style: decimal; }

dl {
  dt { font-weight: bold; }
  //dd {}
}

/** Links */

a[href] {
  color: $base-link-color;
  text-decoration: none;
}

a > img {
  @include hoverify() {
    opacity: $base-image-hover-opacity;
  }
}

// Extendable standard link
@mixin base-link {
  color: $base-link-color;
  text-decoration: underline;

  @include hoverify() {
    color: $base-link-hover-color;
    text-decoration: none;
  }
}


/** Figures */

figure {
  @include hoverify() {
    img { filter: none; } //TODO: Can be safely dropped?
  }

  img {
    display: block;
    width: 100%;
  }

  p { color: $base-font-color; }
}


/** Miscs */

time { color: $grey; }

